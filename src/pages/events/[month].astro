---
import PrimaryLayout from "@layouts/primary.astro";
import type { CollectionEntry } from "astro:content";
import CollectionHeader from "@components/CollectionHeader.astro";
import MonthCalendar from "@components/MonthCalendar.astro";
import EventItem from "@components/EventItem.astro";
import { queryEvents } from "src/utils";
import KeywordsFilterWidget from "@components/KeywordsFilterWidget.astro";
import { DateTime } from "luxon";
import cfg from 'src/config';
export const prerender = false;


type Event = CollectionEntry<"events">;

if (!Astro.params.month) {
    return Astro.redirect("/events");
}

const month = DateTime.fromFormat(Astro.params.month, "yyyy-MM", { zone: cfg.TIMEZONE });

const lastMonth = month.minus({ months: 1 });
const nextMonth = month.plus({ months: 1 });

// Set up filters
const url = new URL(Astro.url);
url.searchParams.append('in', Astro.params.month);
const events = await queryEvents(url.searchParams)
const filter = Astro.url.searchParams.get("keywords");

const byDay = new Map<string, Event[]>();
for(const event of events) {
    const day = DateTime.fromJSDate(event.data.startDate, {zone: cfg.TIMEZONE}).startOf('day');
    const dayEvents = byDay.get(day.toISO() as string) || [];
    dayEvents.push(event);
    byDay.set(day.toISO() as string, dayEvents);
}

---

<PrimaryLayout>
    <script>
        import {DateTime} from 'luxon';
        import cfg from 'src/config';

        const str = location.pathname.split('/')[2];
        console.log(str);
        const month = DateTime.fromFormat(str, "yyyy-MM", { zone: cfg.TIMEZONE });

        // Update the "to today" link
        const toToday = document.getElementById("to-today");
        toToday.href = "#" + DateTime.local().toFormat('dd');

        // Make sure there is a section for today, even if there are no events
        const today = DateTime.now().startOf('day');
        if(today.hasSame(month, 'month')) {
        const sections = document.querySelectorAll('section[data-datetime]');
        for(const section of sections) {
            const sectionDate = DateTime.fromISO(section.dataset.datetime).setZone(cfg.TIMEZONE);
            if(sectionDate.hasSame(today, 'day')) {
                section.classList.add('today');
                break;
            };
            if(sectionDate < today) continue;
            const newSection = document.createElement('section');
            newSection.classList.add('today');
            newSection.setAttribute('data-datetime', today.toISO());
            newSection.innerHTML = `<h3 id="${today.toFormat('dd')}">${today.toFormat('EEEE, MMMM d')}</h3><div>No events today</div>`;
            section.before(newSection);
            break;
        
        }
        }
        const flashHeading = () => {
            const hash = window.location.hash;
            if(!hash) return;
            const heading = document.getElementById(hash.slice(1));
            if(!heading) return;

            heading.classList.add('flash');
            setTimeout(() => heading.classList.remove('flash'), 1000);
        }
        // Flash the section header for the day you clicked an anchor for
        window.addEventListener('hashchange', flashHeading);
        flashHeading();
    </script>
    <CollectionHeader collection="events" {filter}>
        <astro:fragment slot="title">
            Events <time class="alt">{month.toFormat('LLLL yyyy')}</time>
        </astro:fragment>
        <a id="to-today">scroll to today</a>
    </CollectionHeader>
    <nav>
        <a href={"/events/" + lastMonth.toFormat('yyyy-MM')}>
            &larr; {lastMonth.toFormat("LLLL")}
        </a>
        <a href={"/events/" + nextMonth.toFormat("yyyy-MM")}>
            {nextMonth.toFormat( "LLLL")} &rarr;
        </a>
    </nav>
    <div>
        <aside id="calendar">
            <MonthCalendar
                monthOf={month}
                events={events.map((event) => event.data.startDate)}
            />
        </aside>
        <main>
            {events.length === 0 && (
                <article style="text-align:center;">
                <p>No events found for this month.</p>
            </article>
            )}
            
            {Array.from(byDay.entries()).map(([day, events]) => {
                events = events.sort((a, b) => a.data.startDate.valueOf() - b.data.startDate.valueOf());
                const date = DateTime.fromISO(day);
                return (
                <section data-datetime={day}>
                    <h3 id={date.toFormat('dd')}>{date.toFormat("EEEE, MMMM d")}</h3>
                    <ul>
                        {events.map((event) => (<EventItem {event} />))}
                    </ul>
                </section>
                )})}
        </main>
        <aside class="sidebar">
            <KeywordsFilterWidget collection="events"/>
            <article class="widget">
                <h5>Don't see your event?</h5>
                <p>
                    Let us know at <a href="mailto:contribute@corvallisalt.org"
                        >contribute@corvallisalt.org</a
                    >
                </p>
            </article>
        </aside>
    </div>
</PrimaryLayout>

<style is:global>
    @keyframes flash {
        0% {
            background-color: var(--primary);
            color: var(--light);
        }
        100% {
            background-color: inherit;
            color: inherit;
        }
    }
    .flash {
        animation: flash 1s;
    }

    section.today h3::after {
        content: ' (today)';
    }

    main :first-child h3 {
        margin-top: 0;
    }

</style>

<style>
    
    div {
        flex: auto;
        display: grid;
        grid-template-areas: "calendar main aside";
        grid-template-columns: 1fr 2fr 1fr;
        align-items: start;
        gap: 2rem;
    }

    main {
        grid-area: main;
        flex: 1 0 300px;
        margin: 0;
    }

    main section:first-child h3 {
        margin-top: 0;
    }

    @media( max-width: 1080px) {
        div {
            grid-template-areas: "calendar main" "aside main";
            grid-template-columns: 1fr 2fr;
            grid-template-rows: auto 1fr;
        }
    }

    @media (max-width: 800px) {
        div {
            grid-template-areas: "calendar" "main" "aside";
            grid-template-columns: 1fr;
        }
    }

    #calendar {
        grid-area: calendar;
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .sidebar {
        grid-area: aside;
        display: flex;
        flex-direction: column;
        margin: 0;
    }

    main ul {
        padding: 0 1rem;
    }

    nav {
        margin-top: -.5rem;
        margin-bottom: 1rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    #to-today {
        margin: 0;
    }

   

</style>

