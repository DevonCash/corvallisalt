---
import type { CollectionEntry } from 'astro:content';
import {format} from 'src/utils';
import { isToday, isThisWeek, isThisMonth, startOfWeek, endOfWeek} from 'date-fns';
import { group } from 'src/utils';
import EventItem from './EventItem.astro';


type Event = CollectionEntry<"events">;

const events: Event[] = Astro.props.events;
const timeGroups = {
    today: (event: Event) => isToday(event.data.startDate),
    'this week': (event: Event) => isThisWeek(event.data.startDate),
    'this month': (event: Event) => isThisMonth(event.data.startDate), // Already filtering future events in the getCollection call
};

const grouped = group(events, timeGroups);

const dates: { [key: string]: string } = {
    today: format(new Date(), 'MMM d'),
    'this week': format(startOfWeek(new Date()), 'MMM d') + ' - ' + format(endOfWeek(new Date()), 'MMM d'),
    'this month': format(new Date(), 'MMMM'),
}
---
{
    Object.entries(grouped).filter(([_, evts]) => evts.length > 0).map(([group, evts]) => (
        <section>
            <hgroup>
                <h3>{group}</h3>
                <time>{dates[group]}</time>
            </hgroup>
            <ul>
                {evts.map((event) => (<EventItem {event} />))}
            </ul>
        </section>
    ))
}

<style>

    hgroup time {
        font-size: 1.5rem;
        color: var(--primary);
        margin-left: .5rem;

    }

    hgroup {
        text-transform: capitalize;
        display: flex;
        align-items: center;
        border-bottom: 2px solid currentColor;
        flex-wrap: wrap;
    }

    h3 {
        white-space: nowrap;
    }

    section ul {
        padding: 1.5rem 0.5rem;
    }

    section {
        margin-bottom: 2rem;
    }

</style>